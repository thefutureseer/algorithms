The tricky part is that its all in the call stack and..
The process of propagating values 
back in recursive functions is 
facilitated by the call stack. 
The call stack is a data structure 
used by the program's runtime 
environment to keep track of 
function calls.

WHEN A FUNCTION IS CALLED:  
a new frame (also known as 
an activation record) is 
added to the call stack. 
This frame contains the 
function's parameters, 
local variables, and the 
return address. The return 
address is the point in the 
code where the program should 
continue executing after the 
function call is complete.

In the case of recursive functions, 
as each recursive call is made, a 
new frame is added to the call stack. (stacking up and up)
These frames are stacked on top of 
each other in a last-in-first-out 
(LIFO) order. The call stack keeps 
track of the execution context for 
each active function call.

When a base case is reached in the 
recursion, the function returns a value. 
This return causes the current frame to 
be removed from the top of the call stack, 
and the program execution continues in the 
previous frame.

At this point, the returned value is 
available in the previous frame, which 
can use it for further calculations or 
return it to the calling function. This 
process continues until all the frames 
have been popped off the call stack, and 
the final result is obtained at the 
top-level function call.

So, the call stack plays a crucial role in 
maintaining the context of *RECURSIVE* 
function calls and propagating the returned 
values back to the calling functions.


The process of propagating the values back 
in recursive functions happens naturally as 
part of the recursive function calls and returns.

When a recursive function is called, it creates 
a new instance of that function on the call stack. 
This stack keeps track of the function calls and 
their associated data. As the recursive calls are 
made, new instances of the function are added to 
the stack.

Once the base case is reached, the recursive calls 
start returning their results. As each recursive 
call returns, the associated function instance is 
popped off the call stack, and the control flow 
returns to the previous instance of the function 
on the stack.

At this point, the returned value from the recursive 
call is available to the previous instance of the 
function. This returned value can be used to calculate 
the result at the current position.

In the case of the Fibonacci algorithm, the returned 
values from the recursive calls are summed together 
to calculate the Fibonacci value at the current position. 
These values are passed back up the call stack until the 
final result is obtained.

The propagation of values happens automatically due to the 
nature of the recursive function calls and returns. Each 
recursive call returns its value to the previous call, which 
eventually leads to the final result being calculated at the 
initial call.



Starting at 0 or 1??

In the Fibonacci sequence, the starting point can vary depending on the convention used. There are two common conventions for the starting point of the Fibonacci sequence:

In the 0-based convention: The Fibonacci sequence starts with 0 as the first number and 1 as the second number. The sequence then continues by adding the two preceding numbers to obtain the next number.

The 0-based Fibonacci sequence would be: 0, 1, 1, 2, 3, 5, 8, 13, ...

In the 1-based convention: The Fibonacci sequence starts with 1 as the first number and 1 as the second number. Again, the sequence continues by adding the two preceding numbers to obtain the next number.

The 1-based Fibonacci sequence would be: 1, 1, 2, 3, 5, 8, 13, 21, ...

Both conventions are commonly used, and the choice of starting point depends on the context and the specific requirements of the problem or application.