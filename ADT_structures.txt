Abstract data Types
Abstract data type: A model for data types defined by behavior. “Class of objects whose logical behavior is defined by a set of values & a set of operations” 

Data structure: ADT, in contrast to Data structures, which are concrete representations of data, and are the point of view of an implementer, not a user. 

Some types of abstract data structures
Assessed by the IB (IB standards are the intellectual property of the International Baccalaureate Organization)
1. static and dynamic data structure
2. arrays
3. two-dimensional arrays
4. stack
5. queue
6. linked list
7. tree
8. binary tree
9. collections
10. recursion

NOT Assessed by the IB , but you should know them
1. lists
2. dictionaries
3. sets
4. tuple

From link: https://computersciencewiki.org/index.php/Abstract_data_structures#Some_types_of_abstract_data_structures


ADT is the logical picture of the data and the operations to manipulate the component elements of the data. Data structure is the actual representation of the data during the implementation and the algorithms to manipulate the data elements.
From this link:
* https://www.google.com/search?q=abstract+data+type+vs+data+structure&oq=abstract+data+type+vs+&aqs=chrome.0.0i512j69i57j0i512l8.6618j0j7&sourceid=chrome&ie=UTF-8

￼
*Abstract data types[1]
*In computer science, an abstract data type (ADT) is a mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations. *This contrasts with data structures, which are concrete representations of data, and are the point of view of an implementer, not a user.

*Formally, an ADT may be defined as a "class of objects whose logical behavior is defined by a set of values and a set of operations"; this is analogous to an algebraic structure in mathematics. What is meant by "behavior" varies by author, with the two main types of formal specifications for behavior being axiomatic (algebraic) specification and an abstract model; these correspond to axiomatic semantics and operational semantics of an abstract machine, respectively. Some authors also include the computational complexity ("cost"), both in terms of time (for computing operations) and space (for representing values).[2]

The reason we use abstract structures is because they efficiently use memory based on the design of the data stored in them. With very large amounts of data or very frequently changing data, the data structure can make a huge difference in the efficiency (run time) of your computer program.
In more common language, an abstract data structure is just some arrangement of data that we've built into an orderly arrangement.
From this link:
* https://computersciencewiki.org/index.php/Abstract_data_structures
